type token =
  | Num of (int)
  | True
  | False
  | ID of (string)
  | EOF
  | LET
  | REC
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | MUL
  | DIV
  | COLONCOLON
  | SEMI
  | LBRAC
  | RBRAC
  | BRAC
  | LT
  | LE
  | NE
  | AND
  | OR
  | EQ
  | LPAREN
  | RPAREN

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/
 *)
open Nano 
# 41 "nanoParse.ml"
let yytransl_const = [|
  258 (* True *);
  259 (* False *);
    0 (* EOF *);
  261 (* LET *);
  262 (* REC *);
  263 (* IN *);
  264 (* FUN *);
  265 (* ARROW *);
  266 (* IF *);
  267 (* THEN *);
  268 (* ELSE *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* MUL *);
  272 (* DIV *);
  273 (* COLONCOLON *);
  274 (* SEMI *);
  275 (* LBRAC *);
  276 (* RBRAC *);
  277 (* BRAC *);
  278 (* LT *);
  279 (* LE *);
  280 (* NE *);
  281 (* AND *);
  282 (* OR *);
  283 (* EQ *);
  284 (* LPAREN *);
  285 (* RPAREN *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  260 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\006\000\006\000\006\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\004\000\006\000\006\000\007\000\001\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\004\000\
\003\000\002\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\002\000\001\000\002\000\001\000\001\000\001\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\029\000\031\000\032\000\030\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\013\000\012\000\011\000\010\000\000\000\000\000\
\015\000\017\000\000\000\000\000\000\000\000\000\001\000\000\000\
\016\000\000\000\000\000\000\000\003\000\000\000\002\000\004\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000"

let yysindex = "\002\000\
\004\255\000\000\000\000\000\000\000\000\000\000\054\255\009\255\
\004\255\027\255\004\255\000\000\249\254\001\255\052\255\000\000\
\007\255\251\254\014\255\000\000\008\255\044\255\053\255\066\255\
\043\255\000\000\036\255\049\255\037\255\037\255\037\255\037\255\
\037\255\037\255\014\255\014\255\037\255\037\255\000\000\014\255\
\014\255\000\000\004\255\056\255\004\255\004\255\037\255\000\000\
\001\255\052\255\000\000\000\000\000\000\000\000\251\254\251\254\
\000\000\000\000\014\255\014\255\073\255\004\255\000\000\069\255\
\000\000\004\255\077\255\004\255\000\000\004\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\156\000\133\000\000\000\
\127\000\064\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\158\000\135\000\000\000\000\000\000\000\000\000\085\000\106\000\
\000\000\000\000\022\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\247\255\000\000\057\000\058\000\035\000\077\000\016\000\030\000\
\241\255"

let yytablesize = 449
let yytable = "\024\000\
\025\000\028\000\001\000\042\000\003\000\004\000\005\000\006\000\
\007\000\040\000\041\000\008\000\023\000\009\000\003\000\004\000\
\005\000\006\000\029\000\035\000\036\000\023\000\010\000\037\000\
\038\000\030\000\039\000\003\000\004\000\005\000\006\000\011\000\
\025\000\061\000\043\000\063\000\064\000\003\000\004\000\005\000\
\006\000\011\000\024\000\042\000\042\000\025\000\026\000\044\000\
\035\000\036\000\055\000\056\000\067\000\047\000\011\000\010\000\
\069\000\021\000\071\000\022\000\072\000\045\000\026\000\022\000\
\011\000\051\000\052\000\053\000\054\000\059\000\060\000\057\000\
\058\000\031\000\032\000\033\000\046\000\048\000\034\000\066\000\
\068\000\065\000\062\000\070\000\020\000\049\000\027\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\025\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\023\000\025\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\024\000\023\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\000\000\024\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\022\000\024\000\
\000\000\000\000\022\000\022\000\022\000\022\000\000\000\000\000\
\022\000\022\000\000\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\020\000\022\000\000\000\000\000\020\000\
\020\000\020\000\020\000\000\000\000\000\020\000\020\000\000\000\
\020\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\021\000\020\000\000\000\000\000\021\000\021\000\021\000\021\000\
\000\000\000\000\021\000\021\000\000\000\021\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\019\000\021\000\000\000\
\000\000\019\000\019\000\009\000\000\000\008\000\000\000\009\000\
\009\000\008\000\008\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\000\000\009\000\009\000\008\000\
\008\000\009\000\007\000\008\000\006\000\000\000\007\000\007\000\
\006\000\006\000\005\000\000\000\000\000\000\000\005\000\005\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\006\000\
\007\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\005\000"

let yycheck = "\009\000\
\000\000\011\000\001\000\019\000\001\001\002\001\003\001\004\001\
\005\001\015\001\016\001\008\001\004\001\010\001\001\001\002\001\
\003\001\004\001\026\001\013\001\014\001\000\000\019\001\017\001\
\018\001\025\001\020\001\001\001\002\001\003\001\004\001\028\001\
\019\001\043\000\027\001\045\000\046\000\001\001\002\001\003\001\
\004\001\028\001\000\000\059\000\060\000\019\001\020\001\004\001\
\013\001\014\001\035\000\036\000\062\000\018\001\028\001\019\001\
\066\000\004\001\068\000\006\001\070\000\009\001\020\001\000\000\
\028\001\031\000\032\000\033\000\034\000\040\000\041\000\037\000\
\038\000\022\001\023\001\024\001\011\001\029\001\027\001\007\001\
\012\001\047\000\027\001\007\001\000\000\029\000\010\000\030\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\007\001\029\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\007\001\029\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\007\001\029\001\
\255\255\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\007\001\029\001\255\255\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\007\001\029\001\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\007\001\029\001\255\255\
\255\255\011\001\012\001\007\001\255\255\007\001\255\255\011\001\
\012\001\011\001\012\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\255\255\025\001\026\001\025\001\
\026\001\029\001\007\001\029\001\007\001\255\255\011\001\012\001\
\011\001\012\001\007\001\255\255\255\255\255\255\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\026\001\
\029\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\029\001"

let yynames_const = "\
  True\000\
  False\000\
  EOF\000\
  LET\000\
  REC\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  COLONCOLON\000\
  SEMI\000\
  LBRAC\000\
  RBRAC\000\
  BRAC\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  EQ\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  Num\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 25 "nanoParse.mly"
                        ( Fun (_2, _4) )
# 296 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 26 "nanoParse.mly"
                               ( If (_2, _4, _6) )
# 305 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 27 "nanoParse.mly"
                           ( Let (_2,_4,_6) )
# 314 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 28 "nanoParse.mly"
                              ( Letrec (_3,_5,_7) )
# 323 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp0) in
    Obj.repr(
# 29 "nanoParse.mly"
              ( _1 )
# 330 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp0) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 32 "nanoParse.mly"
                    ( Bin(_1, Or, _3) )
# 338 "nanoParse.ml"
               : 'exp0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 33 "nanoParse.mly"
              ( _1 )
# 345 "nanoParse.ml"
               : 'exp0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 36 "nanoParse.mly"
                      ( Bin(_1, And, _3) )
# 353 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 37 "nanoParse.mly"
               ( _1 )
# 360 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 40 "nanoParse.mly"
                     ( Bin(_1, Eq, _3) )
# 368 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 41 "nanoParse.mly"
                     ( Bin(_1, Ne, _3) )
# 376 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 42 "nanoParse.mly"
                     ( Bin(_1, Le, _3) )
# 384 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 43 "nanoParse.mly"
                     ( Bin(_1, Lt, _3) )
# 392 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 44 "nanoParse.mly"
               ( _1 )
# 399 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 47 "nanoParse.mly"
                           ( Bin(_1, Cons, _3) )
# 407 "nanoParse.ml"
               : 'expEC))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 48 "nanoParse.mly"
                           ( Bin(_2, Cons, _4) )
# 415 "nanoParse.ml"
               : 'expEC))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expEC) in
    Obj.repr(
# 49 "nanoParse.mly"
                      ( Bin(_1, Cons, _3) )
# 423 "nanoParse.ml"
               : 'expEC))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp3) in
    Obj.repr(
# 50 "nanoParse.mly"
                  ( Bin(_1, Cons, NilExpr) )
# 430 "nanoParse.ml"
               : 'expEC))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 51 "nanoParse.mly"
              ( _1 )
# 437 "nanoParse.ml"
               : 'expEC))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 54 "nanoParse.mly"
                     ( Bin(_1, Plus, _3) )
# 445 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 55 "nanoParse.mly"
                      ( Bin(_1, Minus, _3) )
# 453 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 56 "nanoParse.mly"
              ( _1 )
# 460 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 59 "nanoParse.mly"
                     ( Bin(_1, Mul, _3) )
# 468 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 60 "nanoParse.mly"
                     ( Bin(_1, Div, _3) )
# 476 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 61 "nanoParse.mly"
              ( _1 )
# 483 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp5) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 64 "nanoParse.mly"
                  ( App(_1, _2) )
# 491 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 65 "nanoParse.mly"
              ( _1 )
# 498 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "nanoParse.mly"
                   ( NilExpr )
# 504 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "nanoParse.mly"
                               ( Const _1 )
# 511 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "nanoParse.mly"
              ( Var _1 )
# 518 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "nanoParse.mly"
               ( True )
# 524 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "nanoParse.mly"
                ( False )
# 530 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 73 "nanoParse.mly"
                         ( _2 )
# 537 "nanoParse.ml"
               : 'exp6))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
