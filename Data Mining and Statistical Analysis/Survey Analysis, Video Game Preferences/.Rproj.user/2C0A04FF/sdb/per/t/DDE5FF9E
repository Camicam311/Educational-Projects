{
    "contents" : "\nMath 189 / Lab Session / Week 5 / Feb 6th\n========================================================\n\n***\n### Abstract:\nToday's lab session covers how to compute CI (confidence interval) and do bootstrapping in r, both of them will be used in your case study 2 report.\n\n***\n\n### PART I: Confidence Interval\nNotes: In statistics, a confidence interval (CI) is a type of interval estimate of a population parameter. Confidence intervals consist of a range of values (interval) that act as good estimates of the unknown population parameter; however, in infrequent cases, none of these values may cover the value of the parameter. The level of confidence of the confidence interval would indicate the probability that the confidence range captures this true population parameter given a distribution of samples. It does not describe any single sample.\n---\nNotes: A 95% confidence interval is that we are 95% confident that the true value of the parameter is in our confidence interval. A 95% confidence interval does not mean that 95% of the sample data lie within the interval.\n\n***\n\n### Example I: CI for a Normal Distribution & a t distribution\nProblem: Here we assume that the sample mean is 5, the standard deviation is 2, and the sample size is 20. In the example below we will use a 95% confidence level and wish to find the confidence interval using a normal distribution. \n---\nNotes: \nP(lower bound < estimatee < upper bound) = 1 - alpha = 0.95\nP(estimatee < upper bound) = 1 - alpha/2 = 0.975\n\n\n```{r 95% CI for sample mean 5, sd 2, sample size 20, normal distribution}\na <- 5\ns <- 2\nn <- 100\nerror <- qnorm(0.975)*s/sqrt(n)\nleft <- a-error\nright <- a+error\nleft\n# check answer: [1] 4.123477\nright\n# check answer: [1] 5.876523\n```\n\nOr using a t distribution:\n\n```{r same example, t distribution}\nerror <- qt(0.975,df=n-1)*s/sqrt(n)\nleft <- a-error\nright <- a+error\nleft\nright\n# check answers: \n# left: [1] 4.063971\n# right: [1] 5.936029\n```\n\n***\n\n### Example II: Confidence Interval for Linear Regression\nProblem: In the data set faithful, develop a 95% confidence interval of the mean eruption duration for the waiting time of 80 minutes.\n\n\n```{r linear model for dataset faithful}\n# We apply the lm function to a formula that describes the variable eruptions by the variable waiting\ndata(faithful)     # attach the data frame \nnames(faithful)\neruption.lm = lm(eruptions ~ waiting)\n\n# Then we create a new data frame that set the waiting time value.\nnewdata = data.frame(waiting=c(80,81))\n\n# Apply the predict function and set the predictor variable in the newdata argument.\npredict(eruption.lm, newdata, interval=\"confidence\") \n\n# check answers:     fit    lwr    upr \n#                 1 4.1762 4.1048 4.2476 \n\ndetach(faithful)     # clean up\n```\nNotes: ?predict.lm for further details.\n\n***\n\n### Example III: Draw CI in R\n\n```{r Draw confidence interval lines of a fitted curve of polynominal regression}\n# Make up some data\nx <- seq(-3, 3, length.out = 100)\ny <- x^2\ny <- log(6+x) + rnorm(100)\n\n# fit a quadratic\nmodel.lm <- lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5))\nfitted <- predict(model.lm, interval = \"confidence\")\n\n# plot the data and the fitted line\nplot(x, y)\nlines(x, fitted[, \"fit\"])\nsummary(model.lm)\n# now the confidence bands\nlines(x, fitted[, \"lwr\"], lty = \"dotted\")\nlines(x, fitted[, \"upr\"], lty = \"dotted\")\n```\n\n\n***\n\n### PART II: Boostrapping\nNotes: In statistics, bootstrapping can refer to any test or metric that relies on random sampling with replacement. Bootstrapping allows assigning measures of accuracy  imates.\n\nNotes: The simplest bootstrap method involves taking the original data set of N heights, and, using a computer, sampling from it to form a new sample (called a 'resample' or bootstrap sample) that is also of size N. The bootstrap sample is taken from the original using sampling with replacement so, assuming N is sufficiently large, for all practical purposes there is virtually zero probability that it will be identical to the original \"real\" sample. This process is repeated a large number of times (typically 1,000 or 10,000 times), and for each of these bootstrap samples we compute its mean (each of these are called bootstrap estimates). We now have a histogram of bootstrap means. This provides an estimate of the shape of the distribution of the mean from which we can answer questions about how much the mean varies.\n\n\n### Example\nHere, we will estimate the size of the standard error by applying the bootstrap\nand sampling many samples WITH REPLACEMENT from the original sample, each the same size as the\noriginal sample, computing a point estimate for each, and finding the standard deviation of this\ndistribution of bootstrap statistics.\n\n```{r Atlanta Commute Times}\ninstall.packages(\"Lock5Data\")\nlibrary(Lock5Data)\ndata(CommuteAtlanta)\nstr(CommuteAtlanta)\n\n?CommuteAtlanta\n\ntime.mean = with(CommuteAtlanta, mean(Time))\ntime.mean = mean(CommuteAtlanta$Time)\ntime.mean\n# Check answers: [1] 29.11\n\n# Create a huge matrix with 1000 rows (one for each bootstrap sample) and 500 columns (one for each sampled value, to match the original sample size)\nB = 1000\nn = nrow(CommuteAtlanta)\nboot.samples = matrix(sample(CommuteAtlanta$Time, size = B * n, replace = TRUE), B, n)\n\n# The three arguments to apply() are the object on which parts will applied the function, the number 1 to indicate the function should be applied to each row (use 2 for columns), and the function name mean\nboot.statistics = apply(boot.samples, 1, mean)\n\n# Graph this with a density plot overlaying a histogram for something different\nrequire(ggplot2)\nggplot(data.frame(meanTime = boot.statistics),aes(x=meanTime)) +\n       geom_histogram(binwidth=0.25,aes(y=..density..)) +\n       geom_density(color=\"red\")\n\ntime.se = sd(boot.statistics)\ntime.se\n# check answers: [1] 0.9414\n\nme = ceiling(10 * 2 * time.se)/10\nround(time.mean, 1) + c(-1, 1) * me\n# check answers: [1] 27.2 31.0\n\ntime.mean\ns = sd(CommuteAtlanta$Time)\ntime.error<- qnorm(0.975)*s/sqrt(n)\nleft <- time.mean-time.error\nright <- time.mean+time.error\nleft\nright\n\n\n```\n",
    "created" : 1424399278484.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "566155417",
    "id" : "DDE5FF9E",
    "lastKnownWriteTime" : 1424415565,
    "path" : "C:/Users/Joshs/Desktop/Lab_week_5.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}